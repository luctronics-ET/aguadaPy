   """
Backend API - Sistema Aguada CMMS/BMS
FastAPI + PostgreSQL
"""

from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
from typing import Optional
import logging

from .database import get_db, init_db
from .api import leituras, elementos, eventos, relatorios, calibracao, dashboard
from .config import settings

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o"""
    logger.info("üöÄ Iniciando Backend Aguada CMMS/BMS")
    logger.info(f"üìä Ambiente: {settings.ENVIRONMENT}")
    logger.info(f"üóÑÔ∏è  Database: {settings.DB_HOST}:{settings.DB_PORT}/{settings.DB_NAME}")
    
    # Inicializar conex√£o com banco
    try:
        init_db()
        logger.info("‚úÖ Conex√£o com PostgreSQL estabelecida")
    except Exception as e:
        logger.error(f"‚ùå Erro ao conectar PostgreSQL: {e}")
        raise
    
    yield
    
    logger.info("üõë Encerrando Backend Aguada")

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="Aguada CMMS/BMS API",
    description="API REST para Sistema de Supervis√£o H√≠drica com IoT",
    version="1.0.0",
    lifespan=lifespan,
    redirect_slashes=False  # Desabilitar redirect autom√°tico de trailing slash
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar dom√≠nios
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Rotas de leituras (ESP32/Arduino envia aqui)
app.include_router(leituras.router, prefix="/api/leituras", tags=["Leituras"])

# Rotas de elementos (reservat√≥rios, bombas, v√°lvulas)
app.include_router(elementos.router, prefix="/api/elementos", tags=["Elementos"])

# Rotas de eventos (vazamentos, abastecimentos)
app.include_router(eventos.router, prefix="/api/eventos", tags=["Eventos"])

# Rotas de relat√≥rios
app.include_router(relatorios.router, prefix="/api/relatorios", tags=["Relat√≥rios"])

# Rotas de calibra√ß√£o
app.include_router(calibracao.router, prefix="/api/calibracao", tags=["Calibra√ß√£o"])

# Rotas de dashboard
app.include_router(dashboard.router, tags=["Dashboard"])

@app.get("/")
async def root():
    """Health check endpoint"""
    return {
        "status": "online",
        "service": "Aguada CMMS/BMS API",
        "version": "1.0.0",
        "database": "connected"
    }

@app.get("/health")
async def health_check():
    """Verifica√ß√£o de sa√∫de do sistema"""
    try:
        # Testa conex√£o com banco
        conn = get_db()
        cursor = conn.cursor()
        cursor.execute("SELECT 1")
        cursor.close()
        
        return {
            "status": "healthy",
            "database": "connected",
            "timestamp": "NOW()"
        }
    except Exception as e:
        logger.error(f"Health check falhou: {e}")
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=f"Service unhealthy: {str(e)}"
        )

@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """Handler global de exce√ß√µes"""
    logger.error(f"Erro n√£o tratado: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={"detail": "Erro interno do servidor"}
    )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=3000,
        reload=True
    )
